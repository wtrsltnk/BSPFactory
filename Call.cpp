// Call.cpp: implementation of the CCall class.
//
//////////////////////////////////////////////////////////////////////

#include "Call.h"
#include "stdio.h"

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CCall::CCall(CTool* tl)
{
	tool = tl;
	run = true;
}

CCall::~CCall()
{
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
char* CCall::Call()
{
	char* str = new char[64];
	str[0] = '\0';
	if (tool)
		sprintf(str, "%s", tool->GetToolName());

	return str;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void CCall::SetTool(CTool* tl)
{
	if (tl == 0)
		return;

	if (tool)
		delete tool;

	tool = tl;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
int CCall::AddParam(CParam* p)
{
	params.Add(p);

	return params.Length();
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void CCall::RemoveParam(int index)
{
	if (index > (int)params.Length())
		return;

	params.Remove(index);
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void CCall::RemoveParam(CParam* p)
{
	for (int i = 0; i < (int)params.Length(); i++)
		if (params[i] == p)
			params.Remove(i);
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
CTool* CCall::GetTool()
{
	return tool;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
int CCall::GetNumParams()
{
	return params.Length();
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
CParam* CCall::GetParam(int index)
{
	if (index > (int)params.Length())
		return 0;

	return params[index];
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
bool CCall::IsRun()
{
	return this->run;
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void CCall::Run(bool run)
{
	this->run = run;
}