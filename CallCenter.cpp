// CallCenter.cpp: implementation of the CCallCenter class.
//
//////////////////////////////////////////////////////////////////////

#include "CallCenter.h"

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CCallCenter::CCallCenter()
{
}

CCallCenter::~CCallCenter()
{
	calls.Resize(0);
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
int CCallCenter::NewCall(CTool* tool)
{
	CCall* pNew = new CCall(tool);

	calls.Add(pNew);

	return calls.Length();
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void CCallCenter::RemoveCall(int call)
{
	if (call > (int)calls.Length())
		return;

	calls.Remove(call);
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void CCallCenter::RemoveCall(CCall* c)
{
	for (int i = 0; i < (int)calls.Length(); i++)
		if (calls[i] == c)
			calls.Remove(i);
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
int CCallCenter::GetNumCalls()
{
	return calls.Length();
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
CCall* CCallCenter::GetCall(int index)
{
	if (index > (int)calls.Length())
		return 0;

	return calls[index];
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
int CCallCenter::NewSetting(char* setting)
{
	CSettingVal* pNew = new CSettingVal(setting);
	
	settings.Add(pNew);

	return settings.Length();
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void CCallCenter::RemoveSetting(int setting)
{
	if (setting > (int)settings.Length())
		return;

	settings.Remove(setting);
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
void CCallCenter::RemoveSetting(CSettingVal* s)
{
	for (int i = 0; i < (int)settings.Length(); i++)
		if (settings[i] == s)
			settings.Remove(i);
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
int CCallCenter::GetNumSettings()
{
	return settings.Length();
}

//////////////////////////////////////////////////////////////////////
// Purpose : 
// Input   : 
// Output  : 
//////////////////////////////////////////////////////////////////////
CSettingVal* CCallCenter::GetSetting(int index)
{
	if (index > (int)settings.Length())
		return 0;

	return settings[index];
}


